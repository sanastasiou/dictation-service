#!/bin/bash
# Dictation Service Control Script

SCRIPT_PATH="$HOME/.local/share/dictation-service/dictation-service.py"
PID_FILE="/tmp/dictation-service.pid"
CONFIG_FILE="$HOME/.config/dictation-service/config.json"
LOG_DIR="$HOME/.local/share/dictation-service/logs"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

is_running() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            return 0
        else
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

case "$1" in
    start)
        if is_running; then
            echo -e "${YELLOW}Dictation service is already running${NC}"
            exit 0
        fi

        echo -e "${GREEN}Starting dictation service...${NC}"

        # Check if we're in the whisper environment
        if [[ "$CONDA_DEFAULT_ENV" != "whisper" ]]; then
            echo -e "${RED}Error: Not in whisper conda environment${NC}"
            echo "Please run: conda activate whisper"
            exit 1
        fi

        # Start the service in background
        # Don't use nohup - it might be messing with stdout
        python "$SCRIPT_PATH" > "$LOG_DIR/dictation.log" 2>&1 &
        PYTHON_PID=$!

        # Give it a moment to start
        sleep 2

        # Check if it's still running
        if ps -p $PYTHON_PID > /dev/null 2>&1; then
            echo -e "${GREEN}✓ Dictation service started${NC}"
            echo "Speak into your microphone and text will appear where your cursor is."
        else
            echo -e "${RED}✗ Failed to start dictation service${NC}"
            echo "Check logs: dictation logs"
            exit 1
        fi
        ;;

    stop)
        if ! is_running; then
            echo -e "${YELLOW}Dictation service is not running${NC}"
            exit 0
        fi

        echo -e "${RED}Stopping dictation service...${NC}"
        PID=$(cat "$PID_FILE")
        kill "$PID" 2>/dev/null

        # Give it time to cleanup
        sleep 1

        # Force kill if still running
        if ps -p "$PID" > /dev/null 2>&1; then
            kill -9 "$PID" 2>/dev/null
        fi

        # Also kill any parecord processes started by this service
        pkill -f "parecord.*--format=s16le.*--rate=48000" 2>/dev/null

        rm -f "$PID_FILE" "/tmp/dictation-recording"
        echo -e "${RED}✓ Dictation service stopped${NC}"
        ;;

    restart)
        $0 stop
        sleep 1
        $0 start
        ;;

    status)
        if is_running; then
            PID=$(cat "$PID_FILE")
            echo -e "${GREEN}● Dictation service is running (PID: $PID)${NC}"

            # Check if parecord is also running
            if pgrep -f "parecord.*--format=s16le.*--rate=48000" > /dev/null; then
                echo -e "${GREEN}  ✓ Audio capture active${NC}"
            else
                echo -e "${RED}  ✗ Audio capture not running${NC}"
            fi

            # Show current config
            if [ -f "$CONFIG_FILE" ]; then
                echo
                echo "Current configuration:"
                jq '{silence_threshold, whisper_model, language}' "$CONFIG_FILE" 2>/dev/null || cat "$CONFIG_FILE"
            fi
        else
            echo -e "${RED}● Dictation service is stopped${NC}"
        fi
        ;;

    toggle)
        if is_running; then
            $0 stop
        else
            $0 start
        fi
        ;;

    logs)
        if [ "$2" == "-f" ]; then
            tail -f "$LOG_DIR"/dictation-*.log
        else
            tail -n 50 "$LOG_DIR"/dictation-*.log
        fi
        ;;

    test)
        echo "Running dictation service in foreground (Ctrl+C to stop)..."
        python "$SCRIPT_PATH"
        ;;

    *)
        echo "Dictation Service Control"
        echo
        echo "Usage: dictation {start|stop|restart|status|toggle|logs|test}"
        echo
        echo "Commands:"
        echo "  start       - Start the dictation service"
        echo "  stop        - Stop the dictation service"
        echo "  restart     - Restart the service"
        echo "  status      - Show service status"
        echo "  toggle      - Toggle service on/off"
        echo "  logs        - Show recent logs (-f to follow)"
        echo "  test        - Run in foreground for testing"
        exit 1
        ;;
esac